type token =
  | INTCONST of (string)
  | IDENTIFIER of (string)
  | PLUS
  | MINUS
  | TIMES
  | ENDINSTR
  | AFFECT
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(** Parser *)


(** Subset of rules in order to generate quads
<statlist>   ::= <stat> | <stat> ; <statlist> 
<stat>	     ::= ...| <forstat> | <affectstat>
<affectstat> ::= ident := <exp>

*)
     open Lang

# 26 "parser.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* MINUS *);
  261 (* TIMES *);
  262 (* ENDINSTR *);
  263 (* AFFECT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INTCONST *);
  258 (* IDENTIFIER *);
    0|]

let yylhs = "\255\255\
\004\000\004\000\004\000\005\000\006\000\003\000\003\000\003\000\
\003\000\002\000\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\003\000\001\000\003\000\001\000\001\000\003\000\
\003\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\010\000\001\000\000\000\012\000\000\000\004\000\
\000\000\000\000\011\000\007\000\006\000\000\000\003\000\000\000\
\000\000\000\000\009\000"

let yydgoto = "\002\000\
\012\000\013\000\014\000\006\000\007\000\008\000"

let yysindex = "\004\000\
\003\000\000\000\000\000\000\000\005\255\000\000\007\255\000\000\
\006\255\003\000\000\000\000\000\000\000\001\255\000\000\006\255\
\006\255\009\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\001\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\250\255\006\000\000\000\000\000"

let yytablesize = 264
let yytable = "\005\000\
\008\000\005\000\004\000\016\000\001\000\017\000\011\000\003\000\
\005\000\018\000\019\000\009\000\010\000\017\000\002\000\015\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\003\000\000\000\008\000\005\000"

let yycheck = "\001\000\
\000\000\000\000\000\000\003\001\001\000\005\001\001\001\002\001\
\010\000\016\000\017\000\007\001\006\001\005\001\000\000\010\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\002\001\255\255\006\001\006\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  ENDINSTR\000\
  AFFECT\000\
  EOF\000\
  "

let yynames_block = "\
  INTCONST\000\
  IDENTIFIER\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 31 "parser.mly"
                                            ( [])
# 161 "parser.ml"
               : Lang.quad list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stat) in
    Obj.repr(
# 32 "parser.mly"
                                            ( _1 )
# 168 "parser.ml"
               : Lang.quad list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'stat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.quad list) in
    Obj.repr(
# 33 "parser.mly"
                                            ( _1@_3 )
# 176 "parser.ml"
               : Lang.quad list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'affectstat) in
    Obj.repr(
# 37 "parser.mly"
                                            ( _1 )
# 183 "parser.ml"
               : 'stat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string*(Lang.quad list)) in
    Obj.repr(
# 40 "parser.mly"
                                          ( let (ident, exp) = (_1, (fst _3)) in (snd _3)@[((currentquad ()),":=",exp,"nil",ident)])
# 191 "parser.ml"
               : 'affectstat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 45 "parser.mly"
                                           ( (_1,[]))
# 198 "parser.ml"
               : string*(Lang.quad list)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 46 "parser.mly"
                                           ( (_1,[]))
# 205 "parser.ml"
               : string*(Lang.quad list)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string*(Lang.quad list)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string*(Lang.quad list)) in
    Obj.repr(
# 47 "parser.mly"
                                           ( let (e1,e2) = (fst _1,fst _3) in 
                                             let res=newtemp ()in 
                                             (res,(((snd _1)@(snd _3)))@[(currentquad ()),"+",e1,e2,res]))
# 215 "parser.ml"
               : string*(Lang.quad list)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string*(Lang.quad list)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string*(Lang.quad list)) in
    Obj.repr(
# 50 "parser.mly"
                                           ( let (e1,e2) = (fst _1,fst _3) in 
                                             let res=newtemp ()in 
                                             (res,(((snd _1)@(snd _3)))@[(currentquad ()),"*",e1,e2,res]))
# 225 "parser.ml"
               : string*(Lang.quad list)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                                            ( _1 )
# 232 "parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "parser.mly"
                                           ( _1 )
# 239 "parser.ml"
               : string))
(* Entry statlist *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let statlist (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lang.quad list)
